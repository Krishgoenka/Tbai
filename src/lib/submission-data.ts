
import { z } from 'zod';
import { submissionSchema, type Submission } from '@/app/admin/submissions/schema';
import { db, storage } from './firebase';
import { collection, getDocs, addDoc, query, orderBy } from 'firebase/firestore';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';

const submissionsCollection = collection(db, 'submissions');

// Type for adding a submission, ID is generated by Firestore.
type AddSubmissionData = Omit<Submission, 'id' | 'fileUrl'>;

export async function getSubmissions() {
  try {
    const q = query(submissionsCollection, orderBy("submissionDate", "desc"));
    const querySnapshot = await getDocs(q);
    const submissions = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    
    return z.array(submissionSchema).parse(submissions);
  } catch (error) {
    console.error("Error fetching submissions: ", error);
    return [];
  }
}

export async function addSubmission(submissionData: AddSubmissionData, file: File) {
    try {
        // 1. Upload file to Firebase Storage
        const storageRef = ref(storage, `submissions/${submissionData.assignmentId}/${Date.now()}_${file.name}`);
        const snapshot = await uploadBytes(storageRef, file);
        const downloadUrl = await getDownloadURL(snapshot.ref);

        // 2. Create the submission document with the file URL
        const submissionWithFile: Omit<Submission, 'id'> = {
            ...submissionData,
            fileUrl: downloadUrl,
        }

        const docRef = await addDoc(submissionsCollection, submissionWithFile);
        return { ...submissionWithFile, id: docRef.id };
    } catch (error) {
        console.error("Error adding submission: ", error);
        throw new Error("Failed to add submission.");
    }
}
