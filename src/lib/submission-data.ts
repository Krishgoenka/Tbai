
import { z } from 'zod';
import { submissionSchema, type Submission } from '@/app/admin/submissions/schema';
import { db } from './firebase';
import { collection, getDocs, addDoc, query, orderBy } from 'firebase/firestore';

const submissionsCollection = collection(db, 'submissions');

// Type for adding a submission, ID is generated by Firestore.
type AddSubmission = Omit<Submission, 'id'>;

export async function getSubmissions() {
  try {
    // Order submissions by date, newest first.
    const q = query(submissionsCollection, orderBy("submissionDate", "desc"));
    const querySnapshot = await getDocs(q);
    const submissions = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    
    // Validate the data from Firestore against our Zod schema.
    return z.array(submissionSchema).parse(submissions);
  } catch (error) {
    console.error("Error fetching submissions: ", error);
    // Return an empty array on error to prevent crashes.
    return [];
  }
}

export async function addSubmission(submission: AddSubmission) {
    try {
        const docRef = await addDoc(submissionsCollection, submission);
        return { ...submission, id: docRef.id };
    } catch (error) {
        console.error("Error adding submission: ", error);
        throw new Error("Failed to add submission.");
    }
}
